-- =====================================================
-- SCHEMA: Ignite Coding Platform (Clean PostgreSQL DDL)
-- Compatible with Hibernate validation
-- =====================================================

-- Drop existing tables in dependency order
DROP TABLE IF EXISTS algorithm_submissions CASCADE;
DROP TABLE IF EXISTS batch_course_assignments CASCADE;
DROP TABLE IF EXISTS batches CASCADE;
DROP TABLE IF EXISTS course_main_topics CASCADE;
DROP TABLE IF EXISTS courses CASCADE;
DROP TABLE IF EXISTS main_topics CASCADE;
DROP TABLE IF EXISTS mcqs CASCADE;
DROP TABLE IF EXISTS problem_submissions CASCADE;
DROP TABLE IF EXISTS problem_test_cases CASCADE;
DROP TABLE IF EXISTS problems CASCADE;
DROP TABLE IF EXISTS pseudocode_submissions CASCADE;
DROP TABLE IF EXISTS topics CASCADE;
DROP TABLE IF EXISTS user_batch_assignments CASCADE;
DROP TABLE IF EXISTS user_problem_engagement CASCADE;
DROP TABLE IF EXISTS user_problem_reports CASCADE;
DROP TABLE IF EXISTS user_topic_engagement CASCADE;
DROP TABLE IF EXISTS users CASCADE;

-- =====================================================
-- TABLE CREATION
-- =====================================================

CREATE TABLE users (
    user_id VARCHAR(255) PRIMARY KEY,
    email VARCHAR(255) NOT NULL UNIQUE,
    name VARCHAR(255) NOT NULL UNIQUE,
    created_at TIMESTAMP(6),
    insights JSONB
);

CREATE TABLE batches (
    batch_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    batch_name VARCHAR(255) NOT NULL,
    start_date TIMESTAMP(6),
    end_date TIMESTAMP(6)
);

CREATE TABLE courses (
    course_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    description TEXT,
    created_at TIMESTAMP(6),
    creator_id VARCHAR(255),
    CONSTRAINT fk_courses_creator FOREIGN KEY (creator_id) REFERENCES users(user_id)
);

CREATE TABLE main_topics (
    main_topic_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    description TEXT,
    creator_id VARCHAR(255) NOT NULL,
    created_at TIMESTAMP(6) NOT NULL,
    CONSTRAINT fk_main_topics_creator FOREIGN KEY (creator_id) REFERENCES users(user_id)
);

CREATE TABLE course_main_topics (
    course_id INTEGER NOT NULL,
    main_topic_id INTEGER NOT NULL,
    PRIMARY KEY (course_id, main_topic_id),
    CONSTRAINT fk_course_main_topics_course FOREIGN KEY (course_id) REFERENCES courses(course_id),
    CONSTRAINT fk_course_main_topics_main_topic FOREIGN KEY (main_topic_id) REFERENCES main_topics(main_topic_id)
);

CREATE TABLE topics (
    topic_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    main_topic_id INTEGER NOT NULL,
    title VARCHAR(255) NOT NULL,
    content JSONB NOT NULL,
    creator_id VARCHAR(255) NOT NULL,
    created_at TIMESTAMP(6) NOT NULL,
    CONSTRAINT fk_topics_main_topic FOREIGN KEY (main_topic_id) REFERENCES main_topics(main_topic_id),
    CONSTRAINT fk_topics_creator FOREIGN KEY (creator_id) REFERENCES users(user_id)
);

CREATE TABLE mcqs (
    mcq_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    topic_id INTEGER NOT NULL,
    content JSONB NOT NULL,
    CONSTRAINT fk_mcqs_topic FOREIGN KEY (topic_id) REFERENCES topics(topic_id)
);

CREATE TABLE problems (
    problem_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    topic_id INTEGER NOT NULL,
    title TEXT,
    description TEXT NOT NULL,
    difficulty VARCHAR(255) NOT NULL CHECK (difficulty IN ('EASY', 'MEDIUM', 'HARD')),
    CONSTRAINT fk_problems_topic FOREIGN KEY (topic_id) REFERENCES topics(topic_id)
);

CREATE TABLE problem_test_cases (
    test_case_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    problem_id INTEGER NOT NULL,
    input TEXT,
    expected_output TEXT,
    is_public BOOLEAN NOT NULL,
    CONSTRAINT fk_problem_test_cases_problem FOREIGN KEY (problem_id) REFERENCES problems(problem_id)
);

CREATE TABLE user_problem_reports (
    user_problem_report_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id VARCHAR(255) NOT NULL,
    problem_id INTEGER NOT NULL,
    is_solved BOOLEAN NOT NULL,
    total_attempts INTEGER NOT NULL,
    insights JSONB NOT NULL,
    languages_used JSON NOT NULL,
    UNIQUE (user_id, problem_id),
    CONSTRAINT fk_user_problem_reports_user FOREIGN KEY (user_id) REFERENCES users(user_id),
    CONSTRAINT fk_user_problem_reports_problem FOREIGN KEY (problem_id) REFERENCES problems(problem_id)
);

CREATE TABLE problem_submissions (
    submission_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id VARCHAR(255) NOT NULL,
    problem_id INTEGER NOT NULL,
    user_problem_report_id INTEGER NOT NULL,
    code TEXT NOT NULL,
    language VARCHAR(255) NOT NULL CHECK (language IN ('JAVA','PYTHON','JAVASCRIPT','TYPESCRIPT')),
    is_solved BOOLEAN,
    version INTEGER NOT NULL,
    passed_test_cases INTEGER DEFAULT 0,
    total_test_cases INTEGER DEFAULT 0,
    submitted_at TIMESTAMP(6) NOT NULL,
    insights JSONB,
    UNIQUE (problem_id, user_id, language),
    CONSTRAINT fk_problem_submissions_user FOREIGN KEY (user_id) REFERENCES users(user_id),
    CONSTRAINT fk_problem_submissions_problem FOREIGN KEY (problem_id) REFERENCES problems(problem_id),
    CONSTRAINT fk_problem_submissions_report FOREIGN KEY (user_problem_report_id) REFERENCES user_problem_reports(user_problem_report_id)
);

CREATE TABLE algorithm_submissions (
    algorithm_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id VARCHAR(255) NOT NULL,
    problem_id INTEGER NOT NULL,
    version INTEGER NOT NULL,
    submitted_at TIMESTAMP(6) NOT NULL,
    is_correct BOOLEAN NOT NULL,
    content TEXT NOT NULL,
    CONSTRAINT fk_algorithm_submissions_user FOREIGN KEY (user_id) REFERENCES users(user_id),
    CONSTRAINT fk_algorithm_submissions_problem FOREIGN KEY (problem_id) REFERENCES problems(problem_id)
);

CREATE TABLE pseudocode_submissions (
    pseudocode_submission_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id VARCHAR(255) NOT NULL,
    problem_id INTEGER NOT NULL,
    version INTEGER NOT NULL,
    submitted_at TIMESTAMP(6) NOT NULL,
    is_correct BOOLEAN NOT NULL,
    content TEXT,
    CONSTRAINT fk_pseudocode_submissions_user FOREIGN KEY (user_id) REFERENCES users(user_id),
    CONSTRAINT fk_pseudocode_submissions_problem FOREIGN KEY (problem_id) REFERENCES problems(problem_id)
);

CREATE TABLE user_batch_assignments (
    batch_id INTEGER NOT NULL,
    user_id VARCHAR(255) NOT NULL,
    PRIMARY KEY (batch_id, user_id),
    CONSTRAINT fk_user_batch_assignments_batch FOREIGN KEY (batch_id) REFERENCES batches(batch_id),
    CONSTRAINT fk_user_batch_assignments_user FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE user_problem_engagement (
    user_id VARCHAR(255) NOT NULL,
    problem_id INTEGER NOT NULL,
    total_attempts INTEGER NOT NULL,
    total_seconds_spent INTEGER NOT NULL,
    last_activity_at TIMESTAMP(6) NOT NULL,
    is_solved BOOLEAN NOT NULL,
    saved_codes JSONB,
    PRIMARY KEY (problem_id, user_id),
    CONSTRAINT fk_user_problem_engagement_user FOREIGN KEY (user_id) REFERENCES users(user_id),
    CONSTRAINT fk_user_problem_engagement_problem FOREIGN KEY (problem_id) REFERENCES problems(problem_id)
);

CREATE TABLE user_topic_engagement (
    user_id VARCHAR(255) NOT NULL,
    topic_id INTEGER NOT NULL,
    total_seconds_spent INTEGER NOT NULL,
    last_activity_at TIMESTAMP(6) NOT NULL,
    is_completed BOOLEAN NOT NULL,
    PRIMARY KEY (topic_id, user_id),
    CONSTRAINT fk_user_topic_engagement_user FOREIGN KEY (user_id) REFERENCES users(user_id),
    CONSTRAINT fk_user_topic_engagement_topic FOREIGN KEY (topic_id) REFERENCES topics(topic_id)
);

CREATE TABLE batch_course_assignments (
    batch_id INTEGER NOT NULL,
    course_id INTEGER NOT NULL,
    PRIMARY KEY (batch_id, course_id),
    CONSTRAINT fk_batch_course_assignments_batch FOREIGN KEY (batch_id) REFERENCES batches(batch_id),
    CONSTRAINT fk_batch_course_assignments_course FOREIGN KEY (course_id) REFERENCES courses(course_id)
);
